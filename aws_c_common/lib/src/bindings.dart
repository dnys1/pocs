// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for the [aws-c-common](https://github.com/awslabs/aws-c-common) library.
class AWSCommon {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AWSCommon(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AWSCommon.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Int32> _sys_nerr = _lookup<ffi.Int32>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _sys_errlist.value = value;

  void aws_fatal_assert(
    ffi.Pointer<ffi.Int8> cond_str,
    ffi.Pointer<ffi.Int8> file,
    int line,
  ) {
    return _aws_fatal_assert(
      cond_str,
      file,
      line,
    );
  }

  late final _aws_fatal_assert_ptr =
      _lookup<ffi.NativeFunction<_c_aws_fatal_assert>>('aws_fatal_assert');
  late final _dart_aws_fatal_assert _aws_fatal_assert =
      _aws_fatal_assert_ptr.asFunction<_dart_aws_fatal_assert>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Int8>>('suboptarg');

  ffi.Pointer<ffi.Int8> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Int8> value) => _suboptarg.value = value;

  int aws_last_error() {
    return _aws_last_error();
  }

  late final _aws_last_error_ptr =
      _lookup<ffi.NativeFunction<_c_aws_last_error>>('aws_last_error');
  late final _dart_aws_last_error _aws_last_error =
      _aws_last_error_ptr.asFunction<_dart_aws_last_error>();

  ffi.Pointer<ffi.Int8> aws_error_str(
    int err,
  ) {
    return _aws_error_str(
      err,
    );
  }

  late final _aws_error_str_ptr =
      _lookup<ffi.NativeFunction<_c_aws_error_str>>('aws_error_str');
  late final _dart_aws_error_str _aws_error_str =
      _aws_error_str_ptr.asFunction<_dart_aws_error_str>();

  ffi.Pointer<ffi.Int8> aws_error_name(
    int err,
  ) {
    return _aws_error_name(
      err,
    );
  }

  late final _aws_error_name_ptr =
      _lookup<ffi.NativeFunction<_c_aws_error_name>>('aws_error_name');
  late final _dart_aws_error_name _aws_error_name =
      _aws_error_name_ptr.asFunction<_dart_aws_error_name>();

  ffi.Pointer<ffi.Int8> aws_error_lib_name(
    int err,
  ) {
    return _aws_error_lib_name(
      err,
    );
  }

  late final _aws_error_lib_name_ptr =
      _lookup<ffi.NativeFunction<_c_aws_error_lib_name>>('aws_error_lib_name');
  late final _dart_aws_error_lib_name _aws_error_lib_name =
      _aws_error_lib_name_ptr.asFunction<_dart_aws_error_lib_name>();

  ffi.Pointer<ffi.Int8> aws_error_debug_str(
    int err,
  ) {
    return _aws_error_debug_str(
      err,
    );
  }

  late final _aws_error_debug_str_ptr =
      _lookup<ffi.NativeFunction<_c_aws_error_debug_str>>(
          'aws_error_debug_str');
  late final _dart_aws_error_debug_str _aws_error_debug_str =
      _aws_error_debug_str_ptr.asFunction<_dart_aws_error_debug_str>();

  void aws_raise_error_private(
    int err,
  ) {
    return _aws_raise_error_private(
      err,
    );
  }

  late final _aws_raise_error_private_ptr =
      _lookup<ffi.NativeFunction<_c_aws_raise_error_private>>(
          'aws_raise_error_private');
  late final _dart_aws_raise_error_private _aws_raise_error_private =
      _aws_raise_error_private_ptr.asFunction<_dart_aws_raise_error_private>();

  void aws_reset_error() {
    return _aws_reset_error();
  }

  late final _aws_reset_error_ptr =
      _lookup<ffi.NativeFunction<_c_aws_reset_error>>('aws_reset_error');
  late final _dart_aws_reset_error _aws_reset_error =
      _aws_reset_error_ptr.asFunction<_dart_aws_reset_error>();

  void aws_restore_error(
    int err,
  ) {
    return _aws_restore_error(
      err,
    );
  }

  late final _aws_restore_error_ptr =
      _lookup<ffi.NativeFunction<_c_aws_restore_error>>('aws_restore_error');
  late final _dart_aws_restore_error _aws_restore_error =
      _aws_restore_error_ptr.asFunction<_dart_aws_restore_error>();

  ffi.Pointer<ffi.NativeFunction<aws_error_handler_fn>>
      aws_set_global_error_handler_fn(
    ffi.Pointer<ffi.NativeFunction<aws_error_handler_fn>> handler,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _aws_set_global_error_handler_fn(
      handler,
      ctx,
    );
  }

  late final _aws_set_global_error_handler_fn_ptr =
      _lookup<ffi.NativeFunction<_c_aws_set_global_error_handler_fn>>(
          'aws_set_global_error_handler_fn');
  late final _dart_aws_set_global_error_handler_fn
      _aws_set_global_error_handler_fn = _aws_set_global_error_handler_fn_ptr
          .asFunction<_dart_aws_set_global_error_handler_fn>();

  ffi.Pointer<ffi.NativeFunction<aws_error_handler_fn>>
      aws_set_thread_local_error_handler_fn(
    ffi.Pointer<ffi.NativeFunction<aws_error_handler_fn>> handler,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _aws_set_thread_local_error_handler_fn(
      handler,
      ctx,
    );
  }

  late final _aws_set_thread_local_error_handler_fn_ptr =
      _lookup<ffi.NativeFunction<_c_aws_set_thread_local_error_handler_fn>>(
          'aws_set_thread_local_error_handler_fn');
  late final _dart_aws_set_thread_local_error_handler_fn
      _aws_set_thread_local_error_handler_fn =
      _aws_set_thread_local_error_handler_fn_ptr
          .asFunction<_dart_aws_set_thread_local_error_handler_fn>();

  /// TODO: this needs to be a private function (wait till we have the cmake story
  /// better before moving it though). It should be external for the purpose of
  /// other libs we own, but customers should not be able to hit it without going
  /// out of their way to do so.
  void aws_register_error_info(
    ffi.Pointer<aws_error_info_list> error_info,
  ) {
    return _aws_register_error_info(
      error_info,
    );
  }

  late final _aws_register_error_info_ptr =
      _lookup<ffi.NativeFunction<_c_aws_register_error_info>>(
          'aws_register_error_info');
  late final _dart_aws_register_error_info _aws_register_error_info =
      _aws_register_error_info_ptr.asFunction<_dart_aws_register_error_info>();

  void aws_unregister_error_info(
    ffi.Pointer<aws_error_info_list> error_info,
  ) {
    return _aws_unregister_error_info(
      error_info,
    );
  }

  late final _aws_unregister_error_info_ptr =
      _lookup<ffi.NativeFunction<_c_aws_unregister_error_info>>(
          'aws_unregister_error_info');
  late final _dart_aws_unregister_error_info _aws_unregister_error_info =
      _aws_unregister_error_info_ptr
          .asFunction<_dart_aws_unregister_error_info>();

  /// Convert a c library io error into an aws error.
  int aws_translate_and_raise_io_error(
    int error_no,
  ) {
    return _aws_translate_and_raise_io_error(
      error_no,
    );
  }

  late final _aws_translate_and_raise_io_error_ptr =
      _lookup<ffi.NativeFunction<_c_aws_translate_and_raise_io_error>>(
          'aws_translate_and_raise_io_error');
  late final _dart_aws_translate_and_raise_io_error
      _aws_translate_and_raise_io_error = _aws_translate_and_raise_io_error_ptr
          .asFunction<_dart_aws_translate_and_raise_io_error>();

  /// Inexpensive (constant time) check of data-structure invariants.
  bool aws_allocator_is_valid(
    ffi.Pointer<aws_allocator> alloc,
  ) {
    return _aws_allocator_is_valid(
          alloc,
        ) !=
        0;
  }

  late final _aws_allocator_is_valid_ptr =
      _lookup<ffi.NativeFunction<_c_aws_allocator_is_valid>>(
          'aws_allocator_is_valid');
  late final _dart_aws_allocator_is_valid _aws_allocator_is_valid =
      _aws_allocator_is_valid_ptr.asFunction<_dart_aws_allocator_is_valid>();

  ffi.Pointer<aws_allocator> aws_default_allocator() {
    return _aws_default_allocator();
  }

  late final _aws_default_allocator_ptr =
      _lookup<ffi.NativeFunction<_c_aws_default_allocator>>(
          'aws_default_allocator');
  late final _dart_aws_default_allocator _aws_default_allocator =
      _aws_default_allocator_ptr.asFunction<_dart_aws_default_allocator>();

  /// Wraps a CFAllocator around aws_allocator. For Mac only. Use this anytime you need a CFAllocatorRef for interacting
  /// with Apple Frameworks. Unfortunately, it allocates memory so we can't make it static file scope, be sure to call
  /// aws_wrapped_cf_allocator_destroy when finished.
  ffi.Pointer<__CFAllocator> aws_wrapped_cf_allocator_new(
    ffi.Pointer<aws_allocator> allocator,
  ) {
    return _aws_wrapped_cf_allocator_new(
      allocator,
    );
  }

  late final _aws_wrapped_cf_allocator_new_ptr =
      _lookup<ffi.NativeFunction<_c_aws_wrapped_cf_allocator_new>>(
          'aws_wrapped_cf_allocator_new');
  late final _dart_aws_wrapped_cf_allocator_new _aws_wrapped_cf_allocator_new =
      _aws_wrapped_cf_allocator_new_ptr
          .asFunction<_dart_aws_wrapped_cf_allocator_new>();

  /// Cleans up any resources alloced in aws_wrapped_cf_allocator_new.
  void aws_wrapped_cf_allocator_destroy(
    ffi.Pointer<__CFAllocator> allocator,
  ) {
    return _aws_wrapped_cf_allocator_destroy(
      allocator,
    );
  }

  late final _aws_wrapped_cf_allocator_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_aws_wrapped_cf_allocator_destroy>>(
          'aws_wrapped_cf_allocator_destroy');
  late final _dart_aws_wrapped_cf_allocator_destroy
      _aws_wrapped_cf_allocator_destroy = _aws_wrapped_cf_allocator_destroy_ptr
          .asFunction<_dart_aws_wrapped_cf_allocator_destroy>();

  /// Returns at least `size` of memory ready for usage or returns NULL on failure.
  ffi.Pointer<ffi.Void> aws_mem_acquire(
    ffi.Pointer<aws_allocator> allocator,
    int size,
  ) {
    return _aws_mem_acquire(
      allocator,
      size,
    );
  }

  late final _aws_mem_acquire_ptr =
      _lookup<ffi.NativeFunction<_c_aws_mem_acquire>>('aws_mem_acquire');
  late final _dart_aws_mem_acquire _aws_mem_acquire =
      _aws_mem_acquire_ptr.asFunction<_dart_aws_mem_acquire>();

  /// Allocates a block of memory for an array of num elements, each of them size bytes long, and initializes all its bits
  /// to zero. Returns null on failure.
  ffi.Pointer<ffi.Void> aws_mem_calloc(
    ffi.Pointer<aws_allocator> allocator,
    int num,
    int size,
  ) {
    return _aws_mem_calloc(
      allocator,
      num,
      size,
    );
  }

  late final _aws_mem_calloc_ptr =
      _lookup<ffi.NativeFunction<_c_aws_mem_calloc>>('aws_mem_calloc');
  late final _dart_aws_mem_calloc _aws_mem_calloc =
      _aws_mem_calloc_ptr.asFunction<_dart_aws_mem_calloc>();

  /// Allocates many chunks of bytes into a single block. Expects to be called with alternating void ** (dest), size_t
  /// (size). The first void ** will be set to the root of the allocation. Alignment is assumed to be sizeof(intmax_t).
  ///
  /// This is useful for allocating structs using the pimpl pattern, as you may allocate the public object and impl object
  /// in the same contiguous block of memory.
  ///
  /// Returns a pointer to the allocation.
  ffi.Pointer<ffi.Void> aws_mem_acquire_many(
    ffi.Pointer<aws_allocator> allocator,
    int count,
  ) {
    return _aws_mem_acquire_many(
      allocator,
      count,
    );
  }

  late final _aws_mem_acquire_many_ptr =
      _lookup<ffi.NativeFunction<_c_aws_mem_acquire_many>>(
          'aws_mem_acquire_many');
  late final _dart_aws_mem_acquire_many _aws_mem_acquire_many =
      _aws_mem_acquire_many_ptr.asFunction<_dart_aws_mem_acquire_many>();

  /// Releases ptr back to whatever allocated it.
  /// Nothing happens if ptr is NULL.
  void aws_mem_release(
    ffi.Pointer<aws_allocator> allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _aws_mem_release(
      allocator,
      ptr,
    );
  }

  late final _aws_mem_release_ptr =
      _lookup<ffi.NativeFunction<_c_aws_mem_release>>('aws_mem_release');
  late final _dart_aws_mem_release _aws_mem_release =
      _aws_mem_release_ptr.asFunction<_dart_aws_mem_release>();

  int aws_mem_realloc(
    ffi.Pointer<aws_allocator> allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ptr,
    int oldsize,
    int newsize,
  ) {
    return _aws_mem_realloc(
      allocator,
      ptr,
      oldsize,
      newsize,
    );
  }

  late final _aws_mem_realloc_ptr =
      _lookup<ffi.NativeFunction<_c_aws_mem_realloc>>('aws_mem_realloc');
  late final _dart_aws_mem_realloc _aws_mem_realloc =
      _aws_mem_realloc_ptr.asFunction<_dart_aws_mem_realloc>();

  ffi.Pointer<aws_allocator> aws_mem_tracer_new(
    ffi.Pointer<aws_allocator> allocator,
    ffi.Pointer<aws_allocator> deprecated,
    int level,
    int frames_per_stack,
  ) {
    return _aws_mem_tracer_new(
      allocator,
      deprecated,
      level,
      frames_per_stack,
    );
  }

  late final _aws_mem_tracer_new_ptr =
      _lookup<ffi.NativeFunction<_c_aws_mem_tracer_new>>('aws_mem_tracer_new');
  late final _dart_aws_mem_tracer_new _aws_mem_tracer_new =
      _aws_mem_tracer_new_ptr.asFunction<_dart_aws_mem_tracer_new>();

  ffi.Pointer<aws_allocator> aws_mem_tracer_destroy(
    ffi.Pointer<aws_allocator> trace_allocator,
  ) {
    return _aws_mem_tracer_destroy(
      trace_allocator,
    );
  }

  late final _aws_mem_tracer_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_aws_mem_tracer_destroy>>(
          'aws_mem_tracer_destroy');
  late final _dart_aws_mem_tracer_destroy _aws_mem_tracer_destroy =
      _aws_mem_tracer_destroy_ptr.asFunction<_dart_aws_mem_tracer_destroy>();

  void aws_mem_tracer_dump(
    ffi.Pointer<aws_allocator> trace_allocator,
  ) {
    return _aws_mem_tracer_dump(
      trace_allocator,
    );
  }

  late final _aws_mem_tracer_dump_ptr =
      _lookup<ffi.NativeFunction<_c_aws_mem_tracer_dump>>(
          'aws_mem_tracer_dump');
  late final _dart_aws_mem_tracer_dump _aws_mem_tracer_dump =
      _aws_mem_tracer_dump_ptr.asFunction<_dart_aws_mem_tracer_dump>();

  int aws_mem_tracer_bytes(
    ffi.Pointer<aws_allocator> trace_allocator,
  ) {
    return _aws_mem_tracer_bytes(
      trace_allocator,
    );
  }

  late final _aws_mem_tracer_bytes_ptr =
      _lookup<ffi.NativeFunction<_c_aws_mem_tracer_bytes>>(
          'aws_mem_tracer_bytes');
  late final _dart_aws_mem_tracer_bytes _aws_mem_tracer_bytes =
      _aws_mem_tracer_bytes_ptr.asFunction<_dart_aws_mem_tracer_bytes>();

  int aws_mem_tracer_count(
    ffi.Pointer<aws_allocator> trace_allocator,
  ) {
    return _aws_mem_tracer_count(
      trace_allocator,
    );
  }

  late final _aws_mem_tracer_count_ptr =
      _lookup<ffi.NativeFunction<_c_aws_mem_tracer_count>>(
          'aws_mem_tracer_count');
  late final _dart_aws_mem_tracer_count _aws_mem_tracer_count =
      _aws_mem_tracer_count_ptr.asFunction<_dart_aws_mem_tracer_count>();

  ffi.Pointer<aws_allocator> aws_small_block_allocator_new(
    ffi.Pointer<aws_allocator> allocator,
    bool multi_threaded,
  ) {
    return _aws_small_block_allocator_new(
      allocator,
      multi_threaded ? 1 : 0,
    );
  }

  late final _aws_small_block_allocator_new_ptr =
      _lookup<ffi.NativeFunction<_c_aws_small_block_allocator_new>>(
          'aws_small_block_allocator_new');
  late final _dart_aws_small_block_allocator_new
      _aws_small_block_allocator_new = _aws_small_block_allocator_new_ptr
          .asFunction<_dart_aws_small_block_allocator_new>();

  void aws_small_block_allocator_destroy(
    ffi.Pointer<aws_allocator> sba_allocator,
  ) {
    return _aws_small_block_allocator_destroy(
      sba_allocator,
    );
  }

  late final _aws_small_block_allocator_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_aws_small_block_allocator_destroy>>(
          'aws_small_block_allocator_destroy');
  late final _dart_aws_small_block_allocator_destroy
      _aws_small_block_allocator_destroy =
      _aws_small_block_allocator_destroy_ptr
          .asFunction<_dart_aws_small_block_allocator_destroy>();

  int aws_small_block_allocator_bytes_active(
    ffi.Pointer<aws_allocator> sba_allocator,
  ) {
    return _aws_small_block_allocator_bytes_active(
      sba_allocator,
    );
  }

  late final _aws_small_block_allocator_bytes_active_ptr =
      _lookup<ffi.NativeFunction<_c_aws_small_block_allocator_bytes_active>>(
          'aws_small_block_allocator_bytes_active');
  late final _dart_aws_small_block_allocator_bytes_active
      _aws_small_block_allocator_bytes_active =
      _aws_small_block_allocator_bytes_active_ptr
          .asFunction<_dart_aws_small_block_allocator_bytes_active>();

  int aws_small_block_allocator_bytes_reserved(
    ffi.Pointer<aws_allocator> sba_allocator,
  ) {
    return _aws_small_block_allocator_bytes_reserved(
      sba_allocator,
    );
  }

  late final _aws_small_block_allocator_bytes_reserved_ptr =
      _lookup<ffi.NativeFunction<_c_aws_small_block_allocator_bytes_reserved>>(
          'aws_small_block_allocator_bytes_reserved');
  late final _dart_aws_small_block_allocator_bytes_reserved
      _aws_small_block_allocator_bytes_reserved =
      _aws_small_block_allocator_bytes_reserved_ptr
          .asFunction<_dart_aws_small_block_allocator_bytes_reserved>();

  int aws_small_block_allocator_page_size(
    ffi.Pointer<aws_allocator> sba_allocator,
  ) {
    return _aws_small_block_allocator_page_size(
      sba_allocator,
    );
  }

  late final _aws_small_block_allocator_page_size_ptr =
      _lookup<ffi.NativeFunction<_c_aws_small_block_allocator_page_size>>(
          'aws_small_block_allocator_page_size');
  late final _dart_aws_small_block_allocator_page_size
      _aws_small_block_allocator_page_size =
      _aws_small_block_allocator_page_size_ptr
          .asFunction<_dart_aws_small_block_allocator_page_size>();

  /// Securely zeroes a memory buffer. This function will attempt to ensure that
  /// the compiler will not optimize away this zeroing operation.
  void aws_secure_zero(
    ffi.Pointer<ffi.Void> pBuf,
    int bufsize,
  ) {
    return _aws_secure_zero(
      pBuf,
      bufsize,
    );
  }

  late final _aws_secure_zero_ptr =
      _lookup<ffi.NativeFunction<_c_aws_secure_zero>>('aws_secure_zero');
  late final _dart_aws_secure_zero _aws_secure_zero =
      _aws_secure_zero_ptr.asFunction<_dart_aws_secure_zero>();

  /// Initializes internal datastructures used by aws-c-common.
  /// Must be called before using any functionality in aws-c-common.
  void aws_common_library_init(
    ffi.Pointer<aws_allocator> allocator,
  ) {
    return _aws_common_library_init(
      allocator,
    );
  }

  late final _aws_common_library_init_ptr =
      _lookup<ffi.NativeFunction<_c_aws_common_library_init>>(
          'aws_common_library_init');
  late final _dart_aws_common_library_init _aws_common_library_init =
      _aws_common_library_init_ptr.asFunction<_dart_aws_common_library_init>();

  /// Shuts down the internal datastructures used by aws-c-common.
  void aws_common_library_clean_up() {
    return _aws_common_library_clean_up();
  }

  late final _aws_common_library_clean_up_ptr =
      _lookup<ffi.NativeFunction<_c_aws_common_library_clean_up>>(
          'aws_common_library_clean_up');
  late final _dart_aws_common_library_clean_up _aws_common_library_clean_up =
      _aws_common_library_clean_up_ptr
          .asFunction<_dart_aws_common_library_clean_up>();

  void aws_common_fatal_assert_library_initialized() {
    return _aws_common_fatal_assert_library_initialized();
  }

  late final _aws_common_fatal_assert_library_initialized_ptr = _lookup<
          ffi.NativeFunction<_c_aws_common_fatal_assert_library_initialized>>(
      'aws_common_fatal_assert_library_initialized');
  late final _dart_aws_common_fatal_assert_library_initialized
      _aws_common_fatal_assert_library_initialized =
      _aws_common_fatal_assert_library_initialized_ptr
          .asFunction<_dart_aws_common_fatal_assert_library_initialized>();

  /// Adds [num] arguments (expected to be of size_t), and returns the result in *r.
  /// If the result overflows, returns AWS_OP_ERR; otherwise returns AWS_OP_SUCCESS.
  int aws_add_size_checked_varargs(
    int num,
    ffi.Pointer<ffi.Uint64> r,
  ) {
    return _aws_add_size_checked_varargs(
      num,
      r,
    );
  }

  late final _aws_add_size_checked_varargs_ptr =
      _lookup<ffi.NativeFunction<_c_aws_add_size_checked_varargs>>(
          'aws_add_size_checked_varargs');
  late final _dart_aws_add_size_checked_varargs _aws_add_size_checked_varargs =
      _aws_add_size_checked_varargs_ptr
          .asFunction<_dart_aws_add_size_checked_varargs>();

  /// Get ticks in nanoseconds (usually 100 nanosecond precision) on the high resolution clock (most-likely TSC). This
  /// clock has no bearing on the actual system time. On success, timestamp will be set.
  int aws_high_res_clock_get_ticks(
    ffi.Pointer<ffi.Uint64> timestamp,
  ) {
    return _aws_high_res_clock_get_ticks(
      timestamp,
    );
  }

  late final _aws_high_res_clock_get_ticks_ptr =
      _lookup<ffi.NativeFunction<_c_aws_high_res_clock_get_ticks>>(
          'aws_high_res_clock_get_ticks');
  late final _dart_aws_high_res_clock_get_ticks _aws_high_res_clock_get_ticks =
      _aws_high_res_clock_get_ticks_ptr
          .asFunction<_dart_aws_high_res_clock_get_ticks>();

  /// Get ticks in nanoseconds (usually 100 nanosecond precision) on the system clock. Reflects actual system time via
  /// nanoseconds since unix epoch. Use with care since an inaccurately set clock will probably cause bugs. On success,
  /// timestamp will be set.
  int aws_sys_clock_get_ticks(
    ffi.Pointer<ffi.Uint64> timestamp,
  ) {
    return _aws_sys_clock_get_ticks(
      timestamp,
    );
  }

  late final _aws_sys_clock_get_ticks_ptr =
      _lookup<ffi.NativeFunction<_c_aws_sys_clock_get_ticks>>(
          'aws_sys_clock_get_ticks');
  late final _dart_aws_sys_clock_get_ticks _aws_sys_clock_get_ticks =
      _aws_sys_clock_get_ticks_ptr.asFunction<_dart_aws_sys_clock_get_ticks>();
}

class aws_error_info extends ffi.Struct {
  @ffi.Int32()
  external int error_code;

  external ffi.Pointer<ffi.Int8> literal_name;

  external ffi.Pointer<ffi.Int8> error_str;

  external ffi.Pointer<ffi.Int8> lib_name;

  external ffi.Pointer<ffi.Int8> formatted_name;
}

class aws_error_info_list extends ffi.Struct {
  external ffi.Pointer<aws_error_info> error_list;

  @ffi.Uint16()
  external int count;
}

abstract class aws_common_error {
  static const int AWS_ERROR_SUCCESS = 0;
  static const int AWS_ERROR_OOM = 1;
  static const int AWS_ERROR_NO_SPACE = 2;
  static const int AWS_ERROR_UNKNOWN = 3;
  static const int AWS_ERROR_SHORT_BUFFER = 4;
  static const int AWS_ERROR_OVERFLOW_DETECTED = 5;
  static const int AWS_ERROR_UNSUPPORTED_OPERATION = 6;
  static const int AWS_ERROR_INVALID_BUFFER_SIZE = 7;
  static const int AWS_ERROR_INVALID_HEX_STR = 8;
  static const int AWS_ERROR_INVALID_BASE64_STR = 9;
  static const int AWS_ERROR_INVALID_INDEX = 10;
  static const int AWS_ERROR_THREAD_INVALID_SETTINGS = 11;
  static const int AWS_ERROR_THREAD_INSUFFICIENT_RESOURCE = 12;
  static const int AWS_ERROR_THREAD_NO_PERMISSIONS = 13;
  static const int AWS_ERROR_THREAD_NOT_JOINABLE = 14;
  static const int AWS_ERROR_THREAD_NO_SUCH_THREAD_ID = 15;
  static const int AWS_ERROR_THREAD_DEADLOCK_DETECTED = 16;
  static const int AWS_ERROR_MUTEX_NOT_INIT = 17;
  static const int AWS_ERROR_MUTEX_TIMEOUT = 18;
  static const int AWS_ERROR_MUTEX_CALLER_NOT_OWNER = 19;
  static const int AWS_ERROR_MUTEX_FAILED = 20;
  static const int AWS_ERROR_COND_VARIABLE_INIT_FAILED = 21;
  static const int AWS_ERROR_COND_VARIABLE_TIMED_OUT = 22;
  static const int AWS_ERROR_COND_VARIABLE_ERROR_UNKNOWN = 23;
  static const int AWS_ERROR_CLOCK_FAILURE = 24;
  static const int AWS_ERROR_LIST_EMPTY = 25;
  static const int AWS_ERROR_DEST_COPY_TOO_SMALL = 26;
  static const int AWS_ERROR_LIST_EXCEEDS_MAX_SIZE = 27;
  static const int AWS_ERROR_LIST_STATIC_MODE_CANT_SHRINK = 28;
  static const int AWS_ERROR_PRIORITY_QUEUE_FULL = 29;
  static const int AWS_ERROR_PRIORITY_QUEUE_EMPTY = 30;
  static const int AWS_ERROR_PRIORITY_QUEUE_BAD_NODE = 31;
  static const int AWS_ERROR_HASHTBL_ITEM_NOT_FOUND = 32;
  static const int AWS_ERROR_INVALID_DATE_STR = 33;
  static const int AWS_ERROR_INVALID_ARGUMENT = 34;
  static const int AWS_ERROR_RANDOM_GEN_FAILED = 35;
  static const int AWS_ERROR_MALFORMED_INPUT_STRING = 36;
  static const int AWS_ERROR_UNIMPLEMENTED = 37;
  static const int AWS_ERROR_INVALID_STATE = 38;
  static const int AWS_ERROR_ENVIRONMENT_GET = 39;
  static const int AWS_ERROR_ENVIRONMENT_SET = 40;
  static const int AWS_ERROR_ENVIRONMENT_UNSET = 41;
  static const int AWS_ERROR_STREAM_UNSEEKABLE = 42;
  static const int AWS_ERROR_NO_PERMISSION = 43;
  static const int AWS_ERROR_FILE_INVALID_PATH = 44;
  static const int AWS_ERROR_MAX_FDS_EXCEEDED = 45;
  static const int AWS_ERROR_SYS_CALL_FAILURE = 46;
  static const int AWS_ERROR_C_STRING_BUFFER_NOT_NULL_TERMINATED = 47;
  static const int AWS_ERROR_STRING_MATCH_NOT_FOUND = 48;
  static const int AWS_ERROR_DIVIDE_BY_ZERO = 49;
  static const int AWS_ERROR_END_COMMON_RANGE = 1023;
}

class aws_allocator extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> mem_acquire;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_2>> mem_release;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_3>> mem_realloc;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_4>> mem_calloc;

  external ffi.Pointer<ffi.Void> impl;
}

class __CFAllocator extends ffi.Opaque {}

abstract class aws_mem_trace_level {
  static const int AWS_MEMTRACE_NONE = 0;
  static const int AWS_MEMTRACE_BYTES = 1;
  static const int AWS_MEMTRACE_STACKS = 2;
}

abstract class aws_timestamp_unit {
  static const int AWS_TIMESTAMP_SECS = 1;
  static const int AWS_TIMESTAMP_MILLIS = 1000;
  static const int AWS_TIMESTAMP_MICROS = 1000000;
  static const int AWS_TIMESTAMP_NANOS = 1000000000;
}

const int AWS_CACHE_LINE = 64;

const String PRInSTR = '%.*s';

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int USER_ADDR_NULL = 0;

const int NULL = 0;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_ctermid = 1024;

const int AWS_PACKAGE_SLOTS = 16;

const int AWS_C_COMMON_PACKAGE_ID = 0;

const int NSIG = 32;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int FP_PREC_24B = 0;

const int FP_PREC_53B = 2;

const int FP_PREC_64B = 3;

const int FP_RND_NEAR = 0;

const int FP_RND_DOWN = 1;

const int FP_RND_UP = 2;

const int FP_CHOP = 3;

const int FP_STATE_BYTES = 512;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_CURRENT = 5;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int AWS_OP_SUCCESS = 0;

const int AWS_OP_ERR = -1;

const int AWS_ERROR_ENUM_STRIDE_BITS = 10;

const int AWS_ERROR_ENUM_STRIDE = 1024;

const int DYNAMIC_TARGETS_ENABLED = 0;

const int TARGET_OS_MAC = 1;

const int TARGET_OS_WIN32 = 0;

const int TARGET_OS_UNIX = 0;

const int TARGET_OS_OSX = 1;

const int TARGET_OS_IPHONE = 0;

const int TARGET_OS_IOS = 0;

const int TARGET_OS_WATCH = 0;

const int TARGET_OS_TV = 0;

const int TARGET_OS_MACCATALYST = 0;

const int TARGET_OS_UIKITFORMAC = 0;

const int TARGET_OS_SIMULATOR = 0;

const int TARGET_OS_EMBEDDED = 0;

const int TARGET_OS_RTKIT = 0;

const int TARGET_OS_DRIVERKIT = 0;

const int TARGET_IPHONE_SIMULATOR = 0;

const int TARGET_OS_NANO = 0;

const int TARGET_ABI_USES_IOS_VALUES = 0;

const int TARGET_CPU_PPC = 0;

const int TARGET_CPU_PPC64 = 0;

const int TARGET_CPU_68K = 0;

const int TARGET_CPU_X86 = 0;

const int TARGET_CPU_X86_64 = 1;

const int TARGET_CPU_ARM = 0;

const int TARGET_CPU_ARM64 = 0;

const int TARGET_CPU_MIPS = 0;

const int TARGET_CPU_SPARC = 0;

const int TARGET_CPU_ALPHA = 0;

const int TARGET_RT_MAC_CFM = 0;

const int TARGET_RT_MAC_MACHO = 1;

const int TARGET_RT_LITTLE_ENDIAN = 1;

const int TARGET_RT_BIG_ENDIAN = 0;

const int TARGET_RT_64_BIT = 1;

const int CHAR_BIT = 8;

const int MB_LEN_MAX = 6;

const int CLK_TCK = 100;

const int SCHAR_MAX = 127;

const int SCHAR_MIN = -128;

const int UCHAR_MAX = 255;

const int CHAR_MAX = 127;

const int CHAR_MIN = -128;

const int USHRT_MAX = 65535;

const int SHRT_MAX = 32767;

const int SHRT_MIN = -32768;

const int UINT_MAX = 4294967295;

const int INT_MAX = 2147483647;

const int INT_MIN = -2147483648;

const int ULONG_MAX = -1;

const int LONG_MAX = 9223372036854775807;

const int LONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int LONG_BIT = 64;

const int SSIZE_MAX = 9223372036854775807;

const int WORD_BIT = 32;

const int SIZE_T_MAX = -1;

const int UQUAD_MAX = -1;

const int QUAD_MAX = 9223372036854775807;

const int QUAD_MIN = -9223372036854775808;

const int ARG_MAX = 1048576;

const int CHILD_MAX = 266;

const int GID_MAX = 2147483647;

const int LINK_MAX = 32767;

const int MAX_CANON = 1024;

const int MAX_INPUT = 1024;

const int NAME_MAX = 255;

const int NGROUPS_MAX = 16;

const int UID_MAX = 2147483647;

const int OPEN_MAX = 10240;

const int PATH_MAX = 1024;

const int PIPE_BUF = 512;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int CHARCLASS_NAME_MAX = 14;

const int COLL_WEIGHTS_MAX = 2;

const int EQUIV_CLASS_MAX = 2;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int RE_DUP_MAX = 255;

const int NZERO = 20;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_KEYS_MAX = 512;

const int PTHREAD_STACK_MIN = 8192;

const int OFF_MIN = -9223372036854775808;

const int OFF_MAX = 9223372036854775807;

const int PASS_MAX = 128;

const int NL_ARGMAX = 9;

const int NL_LANGMAX = 14;

const int NL_MSGMAX = 32767;

const int NL_NMAX = 1;

const int NL_SETMAX = 255;

const int NL_TEXTMAX = 2048;

const int IOV_MAX = 1024;

const int SIZE_BITS = 64;

const int SIZE_MAX_POWER_OF_TWO = -9223372036854775808;

typedef _c_aws_fatal_assert = ffi.Void Function(
  ffi.Pointer<ffi.Int8> cond_str,
  ffi.Pointer<ffi.Int8> file,
  ffi.Int32 line,
);

typedef _dart_aws_fatal_assert = void Function(
  ffi.Pointer<ffi.Int8> cond_str,
  ffi.Pointer<ffi.Int8> file,
  int line,
);

typedef _c_aws_last_error = ffi.Int32 Function();

typedef _dart_aws_last_error = int Function();

typedef _c_aws_error_str = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 err,
);

typedef _dart_aws_error_str = ffi.Pointer<ffi.Int8> Function(
  int err,
);

typedef _c_aws_error_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 err,
);

typedef _dart_aws_error_name = ffi.Pointer<ffi.Int8> Function(
  int err,
);

typedef _c_aws_error_lib_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 err,
);

typedef _dart_aws_error_lib_name = ffi.Pointer<ffi.Int8> Function(
  int err,
);

typedef _c_aws_error_debug_str = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 err,
);

typedef _dart_aws_error_debug_str = ffi.Pointer<ffi.Int8> Function(
  int err,
);

typedef _c_aws_raise_error_private = ffi.Void Function(
  ffi.Int32 err,
);

typedef _dart_aws_raise_error_private = void Function(
  int err,
);

typedef _c_aws_reset_error = ffi.Void Function();

typedef _dart_aws_reset_error = void Function();

typedef _c_aws_restore_error = ffi.Void Function(
  ffi.Int32 err,
);

typedef _dart_aws_restore_error = void Function(
  int err,
);

typedef aws_error_handler_fn = ffi.Void Function(
  ffi.Int32,
  ffi.Pointer<ffi.Void>,
);

typedef _c_aws_set_global_error_handler_fn
    = ffi.Pointer<ffi.NativeFunction<aws_error_handler_fn>> Function(
  ffi.Pointer<ffi.NativeFunction<aws_error_handler_fn>> handler,
  ffi.Pointer<ffi.Void> ctx,
);

typedef _dart_aws_set_global_error_handler_fn
    = ffi.Pointer<ffi.NativeFunction<aws_error_handler_fn>> Function(
  ffi.Pointer<ffi.NativeFunction<aws_error_handler_fn>> handler,
  ffi.Pointer<ffi.Void> ctx,
);

typedef _c_aws_set_thread_local_error_handler_fn
    = ffi.Pointer<ffi.NativeFunction<aws_error_handler_fn>> Function(
  ffi.Pointer<ffi.NativeFunction<aws_error_handler_fn>> handler,
  ffi.Pointer<ffi.Void> ctx,
);

typedef _dart_aws_set_thread_local_error_handler_fn
    = ffi.Pointer<ffi.NativeFunction<aws_error_handler_fn>> Function(
  ffi.Pointer<ffi.NativeFunction<aws_error_handler_fn>> handler,
  ffi.Pointer<ffi.Void> ctx,
);

typedef _c_aws_register_error_info = ffi.Void Function(
  ffi.Pointer<aws_error_info_list> error_info,
);

typedef _dart_aws_register_error_info = void Function(
  ffi.Pointer<aws_error_info_list> error_info,
);

typedef _c_aws_unregister_error_info = ffi.Void Function(
  ffi.Pointer<aws_error_info_list> error_info,
);

typedef _dart_aws_unregister_error_info = void Function(
  ffi.Pointer<aws_error_info_list> error_info,
);

typedef _c_aws_translate_and_raise_io_error = ffi.Int32 Function(
  ffi.Int32 error_no,
);

typedef _dart_aws_translate_and_raise_io_error = int Function(
  int error_no,
);

typedef _c_aws_allocator_is_valid = ffi.Uint8 Function(
  ffi.Pointer<aws_allocator> alloc,
);

typedef _dart_aws_allocator_is_valid = int Function(
  ffi.Pointer<aws_allocator> alloc,
);

typedef _c_aws_default_allocator = ffi.Pointer<aws_allocator> Function();

typedef _dart_aws_default_allocator = ffi.Pointer<aws_allocator> Function();

typedef _c_aws_wrapped_cf_allocator_new = ffi.Pointer<__CFAllocator> Function(
  ffi.Pointer<aws_allocator> allocator,
);

typedef _dart_aws_wrapped_cf_allocator_new = ffi.Pointer<__CFAllocator>
    Function(
  ffi.Pointer<aws_allocator> allocator,
);

typedef _c_aws_wrapped_cf_allocator_destroy = ffi.Void Function(
  ffi.Pointer<__CFAllocator> allocator,
);

typedef _dart_aws_wrapped_cf_allocator_destroy = void Function(
  ffi.Pointer<__CFAllocator> allocator,
);

typedef _c_aws_mem_acquire = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<aws_allocator> allocator,
  ffi.Uint64 size,
);

typedef _dart_aws_mem_acquire = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<aws_allocator> allocator,
  int size,
);

typedef _c_aws_mem_calloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<aws_allocator> allocator,
  ffi.Uint64 num,
  ffi.Uint64 size,
);

typedef _dart_aws_mem_calloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<aws_allocator> allocator,
  int num,
  int size,
);

typedef _c_aws_mem_acquire_many = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<aws_allocator> allocator,
  ffi.Uint64 count,
);

typedef _dart_aws_mem_acquire_many = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<aws_allocator> allocator,
  int count,
);

typedef _c_aws_mem_release = ffi.Void Function(
  ffi.Pointer<aws_allocator> allocator,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_aws_mem_release = void Function(
  ffi.Pointer<aws_allocator> allocator,
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_aws_mem_realloc = ffi.Int32 Function(
  ffi.Pointer<aws_allocator> allocator,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ptr,
  ffi.Uint64 oldsize,
  ffi.Uint64 newsize,
);

typedef _dart_aws_mem_realloc = int Function(
  ffi.Pointer<aws_allocator> allocator,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ptr,
  int oldsize,
  int newsize,
);

typedef _c_aws_mem_tracer_new = ffi.Pointer<aws_allocator> Function(
  ffi.Pointer<aws_allocator> allocator,
  ffi.Pointer<aws_allocator> deprecated,
  ffi.Int32 level,
  ffi.Uint64 frames_per_stack,
);

typedef _dart_aws_mem_tracer_new = ffi.Pointer<aws_allocator> Function(
  ffi.Pointer<aws_allocator> allocator,
  ffi.Pointer<aws_allocator> deprecated,
  int level,
  int frames_per_stack,
);

typedef _c_aws_mem_tracer_destroy = ffi.Pointer<aws_allocator> Function(
  ffi.Pointer<aws_allocator> trace_allocator,
);

typedef _dart_aws_mem_tracer_destroy = ffi.Pointer<aws_allocator> Function(
  ffi.Pointer<aws_allocator> trace_allocator,
);

typedef _c_aws_mem_tracer_dump = ffi.Void Function(
  ffi.Pointer<aws_allocator> trace_allocator,
);

typedef _dart_aws_mem_tracer_dump = void Function(
  ffi.Pointer<aws_allocator> trace_allocator,
);

typedef _c_aws_mem_tracer_bytes = ffi.Uint64 Function(
  ffi.Pointer<aws_allocator> trace_allocator,
);

typedef _dart_aws_mem_tracer_bytes = int Function(
  ffi.Pointer<aws_allocator> trace_allocator,
);

typedef _c_aws_mem_tracer_count = ffi.Uint64 Function(
  ffi.Pointer<aws_allocator> trace_allocator,
);

typedef _dart_aws_mem_tracer_count = int Function(
  ffi.Pointer<aws_allocator> trace_allocator,
);

typedef _c_aws_small_block_allocator_new = ffi.Pointer<aws_allocator> Function(
  ffi.Pointer<aws_allocator> allocator,
  ffi.Uint8 multi_threaded,
);

typedef _dart_aws_small_block_allocator_new = ffi.Pointer<aws_allocator>
    Function(
  ffi.Pointer<aws_allocator> allocator,
  int multi_threaded,
);

typedef _c_aws_small_block_allocator_destroy = ffi.Void Function(
  ffi.Pointer<aws_allocator> sba_allocator,
);

typedef _dart_aws_small_block_allocator_destroy = void Function(
  ffi.Pointer<aws_allocator> sba_allocator,
);

typedef _c_aws_small_block_allocator_bytes_active = ffi.Uint64 Function(
  ffi.Pointer<aws_allocator> sba_allocator,
);

typedef _dart_aws_small_block_allocator_bytes_active = int Function(
  ffi.Pointer<aws_allocator> sba_allocator,
);

typedef _c_aws_small_block_allocator_bytes_reserved = ffi.Uint64 Function(
  ffi.Pointer<aws_allocator> sba_allocator,
);

typedef _dart_aws_small_block_allocator_bytes_reserved = int Function(
  ffi.Pointer<aws_allocator> sba_allocator,
);

typedef _c_aws_small_block_allocator_page_size = ffi.Uint64 Function(
  ffi.Pointer<aws_allocator> sba_allocator,
);

typedef _dart_aws_small_block_allocator_page_size = int Function(
  ffi.Pointer<aws_allocator> sba_allocator,
);

typedef _c_aws_secure_zero = ffi.Void Function(
  ffi.Pointer<ffi.Void> pBuf,
  ffi.Uint64 bufsize,
);

typedef _dart_aws_secure_zero = void Function(
  ffi.Pointer<ffi.Void> pBuf,
  int bufsize,
);

typedef _c_aws_common_library_init = ffi.Void Function(
  ffi.Pointer<aws_allocator> allocator,
);

typedef _dart_aws_common_library_init = void Function(
  ffi.Pointer<aws_allocator> allocator,
);

typedef _c_aws_common_library_clean_up = ffi.Void Function();

typedef _dart_aws_common_library_clean_up = void Function();

typedef _c_aws_common_fatal_assert_library_initialized = ffi.Void Function();

typedef _dart_aws_common_fatal_assert_library_initialized = void Function();

typedef _c_aws_add_size_checked_varargs = ffi.Int32 Function(
  ffi.Uint64 num,
  ffi.Pointer<ffi.Uint64> r,
);

typedef _dart_aws_add_size_checked_varargs = int Function(
  int num,
  ffi.Pointer<ffi.Uint64> r,
);

typedef _c_aws_high_res_clock_get_ticks = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> timestamp,
);

typedef _dart_aws_high_res_clock_get_ticks = int Function(
  ffi.Pointer<ffi.Uint64> timestamp,
);

typedef _c_aws_sys_clock_get_ticks = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint64> timestamp,
);

typedef _dart_aws_sys_clock_get_ticks = int Function(
  ffi.Pointer<ffi.Uint64> timestamp,
);

typedef _typedefC_1 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<aws_allocator>,
  ffi.Uint64,
);

typedef _typedefC_2 = ffi.Void Function(
  ffi.Pointer<aws_allocator>,
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_3 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<aws_allocator>,
  ffi.Pointer<ffi.Void>,
  ffi.Uint64,
  ffi.Uint64,
);

typedef _typedefC_4 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<aws_allocator>,
  ffi.Uint64,
  ffi.Uint64,
);
